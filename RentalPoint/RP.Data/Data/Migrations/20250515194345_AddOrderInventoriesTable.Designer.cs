// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250515194345_AddOrderInventoriesTable")]
    partial class AddOrderInventoriesTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.15");

            modelBuilder.Entity("Core.DBModels.Client", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("FName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("LName")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("SName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("Core.DBModels.Deposit", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("TypeId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("Deposits");
                });

            modelBuilder.Entity("Core.DBModels.Dictionary", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Type")
                        .IsUnique();

                    b.ToTable("Dictionaries");
                });

            modelBuilder.Entity("Core.DBModels.DictionaryValue", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("DictionaryId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DictionaryId");

                    b.ToTable("DictionaryValues");
                });

            modelBuilder.Entity("Core.DBModels.Inventory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("PricePerHour")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("StatusId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TypeId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.HasIndex("TypeId");

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("Core.DBModels.Order", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClientId")
                        .HasColumnType("TEXT");

                    b.Property<string>("DepositId")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("FullPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("StatusId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("DepositId");

                    b.HasIndex("StatusId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Core.DBModels.OrderInventories", b =>
                {
                    b.Property<string>("OrderId")
                        .HasColumnType("TEXT");

                    b.Property<string>("InventoryId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ReturnDateTime")
                        .HasColumnType("TEXT");

                    b.HasKey("OrderId", "InventoryId");

                    b.HasIndex("InventoryId");

                    b.ToTable("OrderInventories");
                });

            modelBuilder.Entity("Core.DBModels.Deposit", b =>
                {
                    b.HasOne("Core.DBModels.DictionaryValue", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Core.DBModels.DictionaryValue", b =>
                {
                    b.HasOne("Core.DBModels.Dictionary", "Dictionary")
                        .WithMany("DictionaryValues")
                        .HasForeignKey("DictionaryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dictionary");
                });

            modelBuilder.Entity("Core.DBModels.Inventory", b =>
                {
                    b.HasOne("Core.DBModels.DictionaryValue", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.DBModels.DictionaryValue", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Status");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Core.DBModels.Order", b =>
                {
                    b.HasOne("Core.DBModels.Client", "Client")
                        .WithMany("OrderLinks")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.DBModels.Deposit", "Deposit")
                        .WithMany("OrderLinks")
                        .HasForeignKey("DepositId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.DBModels.DictionaryValue", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Deposit");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Core.DBModels.OrderInventories", b =>
                {
                    b.HasOne("Core.DBModels.Inventory", "Inventory")
                        .WithMany("OrderInventories")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.DBModels.Order", "Order")
                        .WithMany("OrderInventories")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inventory");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Core.DBModels.Client", b =>
                {
                    b.Navigation("OrderLinks");
                });

            modelBuilder.Entity("Core.DBModels.Deposit", b =>
                {
                    b.Navigation("OrderLinks");
                });

            modelBuilder.Entity("Core.DBModels.Dictionary", b =>
                {
                    b.Navigation("DictionaryValues");
                });

            modelBuilder.Entity("Core.DBModels.Inventory", b =>
                {
                    b.Navigation("OrderInventories");
                });

            modelBuilder.Entity("Core.DBModels.Order", b =>
                {
                    b.Navigation("OrderInventories");
                });
#pragma warning restore 612, 618
        }
    }
}
